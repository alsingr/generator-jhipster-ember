buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.1.RELEASE")
    }
}

plugins {
    id "java"
    id "idea"
    id "project-report"
}

apply plugin: "spring-boot"

configurations {
    newrelic
}

jar {
    baseName = "<%= _.slugify(baseName) %>"
    archiveName = "<%= _.slugify(baseName) %>.jar"
}

springBoot {
    backupSource = false
}

task stage(dependsOn: ["assemble", "newrelic"])
task newrelic(type: Copy) {
    into "$buildDir/newrelic"
    from(configurations.newrelic) {
        rename 'newrelic-agent-(.*).jar', 'newrelic-agent.jar'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    versionManagement 'io.spring.platform:platform-versions:1.1.1.RELEASE@properties'

    newrelic("com.newrelic.agent.java:newrelic-agent:3.12.0")
<% if (ui) { %>
    compile project(':ui')<% } %>
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")<% if (storage == 'postgres') { %>
    compile("com.fasterxml.jackson.datatype:jackson-datatype-hibernate4")<% } %>
    compile("com.zaxxer:HikariCP")
    compile("commons-lang:commons-lang")
    compile("javax.inject:javax.inject")<% if (storage == 'postgres') { %>
    compile("org.jadira.usertype:usertype.extended:3.2.0.GA")
    compile("org.liquibase:liquibase-core")<% } %>
    compile("org.hibernate:hibernate-validator")
    compile("org.springframework.boot:spring-boot-starter-mail")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-security")<% if (storage == 'postgres') { %>
    compile("org.springframework.boot:spring-boot-starter-data-jpa")<% } %><% if (storage == 'mongo') { %>
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")<% } %>
    compile("org.springframework.boot:spring-boot-starter-redis")
    compile("org.springframework.boot:spring-boot-starter-remote-shell")
    compile("org.springframework:spring-context-support")
    compile("org.springframework.security:spring-security-core")
    compile("org.springframework.security:spring-security-web")
    compile("org.springframework.security:spring-security-config")
    compile("org.springframework.security.oauth:spring-security-oauth2")
    compile("org.springframework.security:spring-security-jwt")<% if (stormpath) { %>
    compile("com.stormpath.spring.security:stormpath-spring-security-core:0.3.0")
    compile("com.stormpath.sdk:stormpath-sdk-httpclient:1.0.RC2.1")<% } %>
    compile("org.projectlombok:lombok")
    compile("org.tuckey:urlrewritefilter:4.0.4")
    compile("org.atteo:evo-inflector:1.2.1")
    compile("com.google.guava:guava")
    compile("de.malkusch.validation:validation:0.3.0")<% if (storage == 'postgres') { %>

    // Database dependencies
    compile("org.postgresql:postgresql:9.3-1102-jdbc41")

    runtime("com.mattbertolini:liquibase-slf4j:1.2.1")
<% } %>
    // Test dependencies
    testCompile("org.springframework.boot:spring-boot-starter-test")
}
